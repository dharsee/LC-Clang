/*
H-Index

Solution
Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

Example:

Input: citations = [3,0,6,1,5]
Output: 3 
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had 
             received 3, 0, 6, 1, 5 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note: If there are several possible values for h, the maximum one is taken as the h-index.

   Hide Hint #1  
An easy approach is to sort the array first.
   Hide Hint #2  
What are the possible values of h-index?
   Hide Hint #3  
A faster approach is to use extra space.


*/

class Solution {
public:
    int hIndex(vector<int>& citations) {

        if (citations.empty()) return 0;
        int n = citations.size();
        
        int i = 0;
        
        /*
        // Sort the array in increasing order
        
        sort(citations.begin(), citations.end());
        
        
        
        // This is linear search approach
        n--;
        
        while(n >= 0)
        {
            if (citations[n] > i) i++;
            else break;
            
            n--;
        }
        
        return i;
        
        */
        
        // This is binsearch approach
        
        // To work with binsearch, we need input array should be sorted in decreasing order
        
        
        sort(citations.begin(), citations.end(), greater<>());
        int l = 0, h = n - 1, mid = 0;
     
        while ( l <= h )
        {
            mid = ((h - l) / 2) + l;
            
            if (citations[mid] > mid)
            {
                l = mid + 1;
            }
            else
                h = mid - 1;
        }
        
        return l;
    }
};
